body {
  font-family: "Courier New", Courier, monospace;
  /* UPDATE */
  text-align: center;
}

img {
  width: 100px;
  height: 100px;
}

.title {
  font-size: 36px;
  font-weight: 900;
}

/* do not edit this footer */
.footer {
  position: fixed;
  bottom: 0;
  left: 0;
  right: 0;
  height: 52px;
  display: flex;
  align-items: center;
  justify-content: center;
  background: #eee;
}

/* UPDATES */
.header {
  display: flex;
  /* flex-wrap: wrap; */
  /* justify-content: center; */
  /* align-items: center; */
  gap: 32px;
  flex-direction: column;
}

.flowers {
  display: flex;
  justify-content: center;
  gap: 52px;
}

/* .flower-type {
  display: flex;
  flex-wrap: wrap;
  justify-content: center;
} */

.flower-type {
  max-width: 200px;
}

/* SELF NOTES */
/*
    + first is the solution.css approach which is very elegant, but I couldn't come up with that. The idea is to not consider the title div as a flex item! So the flex container div is wrapped around the four flower cards. Each flower card is also wrapped around an individual div so that the `max-width` property can be applied to keep them of uniform max size. By keeping only one flex container without any nesting, the CSS is very concise.
    + Second approach is using wrap which is rather complicated that I originally came up with so not going into details. Refer the commented out portions in style.css to experiment if needed in future.
    + The third is also a good one that uses flex-direction column approach. In both second and third, the idea is to first wrap each of the flower cards (the img and the text div) into their individual divs, and then wrap all four divs plus the title div into the container/header div. So in this approach, the main flex container has two items: the title div and the .flowers div. Using `flex-direction: column;` we can stack them up vertically. Also, important is to use `text-align: center;` in the body element, as this ensures that the title moves to center. Although this can also be achieved using `align-items: center` in this approach. Remember that since the direction has been changed to column, the align-items: center will now align horizontally. Now, the .flowers div will also be made a flex container with justify-content: center, so that all 4 flowers are aligned horizontally in a straight line. Add a `gap` in both .header and .flowers flex containers to keep some distance. And finish up with `max-width: 200px` in .flower-type. This ensures that all flower items will get equal width so their text content will get wrapped nicely. 
 */
